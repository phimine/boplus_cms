{"remainingRequest":"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!/Users/c5281434/Documents/Project/yshopmall_qd-master/src/mixins/crud.js","dependencies":[{"path":"/Users/c5281434/Documents/Project/yshopmall_qd-master/src/mixins/crud.js","mtime":1590767910000},{"path":"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/@babel/runtime/helpers/defineProperty\"));\n\nrequire(\"regenerator-runtime/runtime\");\n\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/@babel/runtime/helpers/asyncToGenerator\"));\n\nvar _data = require(\"@/api/data\");\n\nvar _index = require(\"@/utils/index\");\n\nvar _permission = _interopRequireDefault(require(\"@/utils/permission\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar _default = {\n  data: function data() {\n    return {\n      // 表格数据\n      data: [],\n      // 排序规则，默认 id 降序， 支持多字段排序 ['id,desc', 'createTime,asc']\n      sort: ['id,desc'],\n      // 页码\n      page: 0,\n      // 每页数据条数\n      size: 10,\n      // 总数据条数\n      total: 0,\n      // 请求数据的url\n      url: '',\n      // 查询数据的参数\n      params: {},\n      // 待查询的对象\n      query: {},\n      // 等待时间\n      time: 50,\n      // 是否为新增类型的表单\n      isAdd: false,\n      // 导出的 Loading\n      downloadLoading: false,\n      // 表格 Loading 属性\n      loading: true,\n      // 删除 Loading 属性\n      delLoading: false,\n      delAllLoading: false,\n      // 弹窗属性\n      dialog: false,\n      // Form 表单\n      form: {},\n      // 重置表单\n      resetForm: {},\n      // 标题\n      title: ''\n    };\n  },\n  methods: {\n    parseTime: _index.parseTime,\n    downloadFile: _index.downloadFile,\n    checkPermission: _permission.default,\n    init: function () {\n      var _init = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this = this;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.beforeInit();\n\n              case 2:\n                if (_context.sent) {\n                  _context.next = 4;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 4:\n                return _context.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this.loading = true; // 请求数据\n\n                  (0, _data.initData)(_this.url, _this.getQueryParame()).then(function (data) {\n                    _this.total = data.totalElements;\n                    _this.data = data.content; // time 毫秒后显示表格\n\n                    setTimeout(function () {\n                      _this.loading = false;\n                    }, _this.time);\n                    resolve(data);\n                  }).catch(function (err) {\n                    _this.loading = false;\n                    reject(err);\n                  });\n                }));\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function init() {\n        return _init.apply(this, arguments);\n      }\n\n      return init;\n    }(),\n    beforeInit: function beforeInit() {\n      return true;\n    },\n    getQueryParame: function getQueryParame() {\n      return _objectSpread(_objectSpread({\n        page: this.page,\n        size: this.size,\n        sort: this.sort\n      }, this.query), this.params);\n    },\n    // 改变页码\n    pageChange: function pageChange(e) {\n      this.page = e - 1;\n      this.init();\n    },\n    // 改变每页显示数\n    sizeChange: function sizeChange(e) {\n      this.page = 0;\n      this.size = e;\n      this.init();\n    },\n    // 预防删除第二页最后一条数据时，或者多选删除第二页的数据时，页码错误导致请求无数据\n    dleChangePage: function dleChangePage(size) {\n      if (size === undefined) {\n        size = 1;\n      }\n\n      if (this.data.length === size && this.page !== 0) {\n        this.page = this.page - 1;\n      }\n    },\n    // 查询方法\n    toQuery: function toQuery() {\n      this.page = 0;\n      this.init();\n    },\n\n    /**\n     * 通用的提示封装\n     */\n    submitSuccessNotify: function submitSuccessNotify() {\n      this.$notify({\n        title: '提交成功',\n        type: 'success',\n        duration: 2500\n      });\n    },\n    addSuccessNotify: function addSuccessNotify() {\n      this.$notify({\n        title: '新增成功',\n        type: 'success',\n        duration: 2500\n      });\n    },\n    editSuccessNotify: function editSuccessNotify() {\n      this.$notify({\n        title: '编辑成功',\n        type: 'success',\n        duration: 2500\n      });\n    },\n    delSuccessNotify: function delSuccessNotify() {\n      this.$notify({\n        title: '删除成功',\n        type: 'success',\n        duration: 2500\n      });\n    },\n    notify: function notify(title, type) {\n      this.$notify({\n        title: title,\n        type: type,\n        duration: 2500\n      });\n    },\n\n    /**\n     * 删除前可以调用 beforeDelMethod 做一些操作\n     */\n    beforeDelMethod: function beforeDelMethod() {\n      return true;\n    },\n\n    /**\n     * 通用的删除\n     */\n    delMethod: function delMethod(id) {\n      var _this2 = this;\n\n      if (!this.beforeDelMethod()) {\n        return;\n      }\n\n      this.delLoading = true;\n      this.crudMethod.del(id).then(function () {\n        _this2.delLoading = false;\n\n        _this2.$refs[id].doClose();\n\n        _this2.dleChangePage();\n\n        _this2.delSuccessNotify();\n\n        _this2.afterDelMethod();\n\n        _this2.init();\n      }).catch(function () {\n        _this2.delLoading = false;\n\n        _this2.$refs[id].doClose();\n      });\n    },\n    afterDelMethod: function afterDelMethod() {},\n\n    /**\n     * 多选删除提示\n     */\n    beforeDelAllMethod: function beforeDelAllMethod() {\n      var _this3 = this;\n\n      this.$confirm('你确定删除选中的数据吗？', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then(function () {\n        _this3.delAllMethod();\n      });\n    },\n\n    /**\n     * 多选删除\n     */\n    delAllMethod: function delAllMethod() {\n      var _this4 = this;\n\n      this.delAllLoading = true;\n      var data = this.$refs.table.selection;\n      var ids = [];\n\n      for (var i = 0; i < data.length; i++) {\n        ids.push(data[i].id);\n      }\n\n      this.crudMethod.delAll(ids).then(function () {\n        _this4.delAllLoading = false;\n\n        _this4.dleChangePage(ids.length);\n\n        _this4.init();\n\n        _this4.$notify({\n          title: '删除成功',\n          type: 'success',\n          duration: 2500\n        });\n      }).catch(function () {\n        _this4.delAllLoading = false;\n      });\n    },\n\n    /**\n     * 显示新增弹窗前可以调用该方法\n     */\n    beforeShowAddForm: function beforeShowAddForm() {},\n\n    /**\n     * 显示新增弹窗\n     */\n    showAddFormDialog: function showAddFormDialog() {\n      this.isAdd = true;\n      this.resetForm = JSON.parse(JSON.stringify(this.form));\n      this.beforeShowAddForm();\n      this.dialog = true;\n    },\n\n    /**\n     * 显示编辑弹窗前可以调用该方法\n     */\n    beforeShowEditForm: function beforeShowEditForm(data) {},\n\n    /**\n     * 显示编辑弹窗\n     */\n    showEditFormDialog: function showEditFormDialog() {\n      var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.isAdd = false;\n\n      if (data) {\n        this.resetForm = JSON.parse(JSON.stringify(this.form));\n        this.form = JSON.parse(JSON.stringify(data));\n      }\n\n      this.beforeShowEditForm(data);\n      this.dialog = true;\n    },\n\n    /**\n     * 新增方法\n     */\n    addMethod: function addMethod() {\n      var _this5 = this;\n\n      this.crudMethod.add(this.form).then(function () {\n        _this5.addSuccessNotify();\n\n        _this5.loading = false;\n\n        _this5.afterAddMethod();\n\n        _this5.cancel();\n\n        _this5.init();\n      }).catch(function () {\n        _this5.loading = false;\n\n        _this5.afterAddErrorMethod();\n      });\n    },\n\n    /**\n     * 新增后可以调用该方法\n     */\n    afterAddMethod: function afterAddMethod() {},\n\n    /**\n     * 新增失败后调用该方法\n     */\n    afterAddErrorMethod: function afterAddErrorMethod() {},\n\n    /**\n     * 通用的编辑方法\n     */\n    editMethod: function editMethod() {\n      var _this6 = this;\n\n      this.crudMethod.edit(this.form).then(function () {\n        _this6.editSuccessNotify();\n\n        _this6.loading = false;\n\n        _this6.afterEditMethod();\n\n        _this6.cancel();\n\n        _this6.init();\n      }).catch(function () {\n        _this6.loading = false;\n      });\n    },\n\n    /**\n     * 编辑后可以调用该方法\n     */\n    afterEditMethod: function afterEditMethod() {},\n\n    /**\n     * 提交前可以调用该方法\n     */\n    beforeSubmitMethod: function beforeSubmitMethod() {\n      return true;\n    },\n\n    /**\n     * 提交\n     */\n    submitMethod: function submitMethod() {\n      var _this7 = this;\n\n      if (!this.beforeSubmitMethod()) {\n        return;\n      }\n\n      if (this.$refs['form']) {\n        this.$refs['form'].validate(function (valid) {\n          if (valid) {\n            _this7.loading = true;\n\n            if (_this7.isAdd) {\n              _this7.addMethod();\n            } else _this7.editMethod();\n          }\n        });\n      }\n    },\n\n    /**\n     * 隐藏弹窗\n     */\n    cancel: function cancel() {\n      this.dialog = false;\n\n      if (this.$refs['form']) {\n        this.$refs['form'].clearValidate();\n        this.form = this.resetForm;\n      }\n    },\n\n    /**\n     * 获取弹窗的标题\n     */\n    getFormTitle: function getFormTitle() {\n      return this.isAdd ? \"\\u65B0\\u589E\".concat(this.title) : \"\\u7F16\\u8F91\".concat(this.title);\n    },\n\n    /**\n     * 通用导出\n     */\n    downloadMethod: function downloadMethod() {\n      var _this8 = this;\n\n      this.beforeInit();\n      this.downloadLoading = true;\n      (0, _data.download)(this.url + '/download', this.params).then(function (result) {\n        _this8.downloadFile(result, _this8.title + '数据', 'xlsx');\n\n        _this8.downloadLoading = false;\n      }).catch(function () {\n        _this8.downloadLoading = false;\n      });\n    }\n  }\n};\nexports.default = _default;",null]}