{"remainingRequest":"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js!/Users/c5281434/Documents/Project/yshopmall_qd-master/src/components/Crud/crud.js","dependencies":[{"path":"/Users/c5281434/Documents/Project/yshopmall_qd-master/src/components/Crud/crud.js","mtime":1590767910000},{"path":"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/_cache-loader@2.0.1@cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/_babel-loader@8.1.0@babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.presenter = presenter;\nexports.header = header;\nexports.form = form;\nexports.pagination = pagination;\nexports.crud = crud;\nexports.default = void 0;\n\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\n\nrequire(\"core-js/modules/es6.string.iterator\");\n\nrequire(\"core-js/modules/es6.set\");\n\nrequire(\"core-js/modules/es6.object.freeze\");\n\nrequire(\"core-js/modules/es6.array.find-index\");\n\nrequire(\"core-js/modules/es6.array.find\");\n\nvar _typeof2 = _interopRequireDefault(require(\"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/@babel/runtime/helpers/typeof\"));\n\nrequire(\"core-js/modules/es6.object.keys\");\n\nrequire(\"core-js/modules/es6.array.sort\");\n\nrequire(\"core-js/modules/web.dom.iterable\");\n\nvar _defineProperty2 = _interopRequireDefault(require(\"/Users/c5281434/Documents/Project/yshopmall_qd-master/node_modules/@babel/runtime/helpers/defineProperty\"));\n\nvar _data = require(\"@/api/data\");\n\nvar _index = require(\"@/utils/index\");\n\nvar _vue = _interopRequireDefault(require(\"vue\"));\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/**\n * CRUD配置\n * @author moxun\n * @param {*} options <br>\n * @return crud instance.\n * @example\n */\nfunction CRUD(options) {\n  var defaultOptions = {\n    // 标题\n    title: '',\n    // 请求数据的url\n    url: '',\n    // 表格数据\n    data: [],\n    // 选择项\n    selections: [],\n    // 待查询的对象\n    query: {},\n    // 查询数据的参数\n    params: {},\n    // Form 表单\n    form: {},\n    // 重置表单\n    defaultForm: function defaultForm() {},\n    // 排序规则，默认 id 降序， 支持多字段排序 ['id,desc', 'createTime,asc']\n    sort: ['id,desc'],\n    // 等待时间\n    time: 50,\n    // CRUD Method\n    crudMethod: {\n      add: function add(form) {},\n      delete: function _delete(id) {},\n      edit: function edit(form) {},\n      get: function get(id) {}\n    },\n    // 主页操作栏显示哪些按钮\n    optShow: {\n      add: true,\n      edit: true,\n      del: true,\n      download: true\n    },\n    // 自定义一些扩展属性\n    props: {},\n    // 在主页准备\n    queryOnPresenterCreated: true,\n    // 调试开关\n    debug: false\n  };\n  options = mergeOptions(defaultOptions, options);\n\n  var data = _objectSpread(_objectSpread({}, options), {}, {\n    // 记录数据状态\n    dataStatus: {},\n    status: {\n      add: CRUD.STATUS.NORMAL,\n      edit: CRUD.STATUS.NORMAL,\n\n      // 添加或编辑状态\n      get cu() {\n        if (this.add === CRUD.STATUS.NORMAL && this.edit === CRUD.STATUS.NORMAL) {\n          return CRUD.STATUS.NORMAL;\n        } else if (this.add === CRUD.STATUS.PREPARED || this.edit === CRUD.STATUS.PREPARED) {\n          return CRUD.STATUS.PREPARED;\n        } else if (this.add === CRUD.STATUS.PROCESSING || this.edit === CRUD.STATUS.PROCESSING) {\n          return CRUD.STATUS.PROCESSING;\n        }\n\n        throw new Error('wrong crud\\'s cu status');\n      },\n\n      // 标题\n      get title() {\n        return this.add > CRUD.STATUS.NORMAL ? \"\\u65B0\\u589E\".concat(crud.title) : this.edit > CRUD.STATUS.NORMAL ? \"\\u7F16\\u8F91\".concat(crud.title) : crud.title;\n      }\n\n    },\n    msg: {\n      submit: '提交成功',\n      add: '新增成功',\n      edit: '编辑成功',\n      del: '删除成功'\n    },\n    page: {\n      // 页码\n      page: 0,\n      // 每页数据条数\n      size: 10,\n      // 总数据条数\n      total: 0\n    },\n    // 整体loading\n    loading: true,\n    // 导出的 Loading\n    downloadLoading: false,\n    // 删除的 Loading\n    delAllLoading: false\n  });\n\n  var methods = {\n    /**\n     * 通用的提示\n     */\n    submitSuccessNotify: function submitSuccessNotify() {\n      crud.notify(crud.msg.submit, CRUD.NOTIFICATION_TYPE.SUCCESS);\n    },\n    addSuccessNotify: function addSuccessNotify() {\n      crud.notify(crud.msg.add, CRUD.NOTIFICATION_TYPE.SUCCESS);\n    },\n    editSuccessNotify: function editSuccessNotify() {\n      crud.notify(crud.msg.edit, CRUD.NOTIFICATION_TYPE.SUCCESS);\n    },\n    delSuccessNotify: function delSuccessNotify() {\n      crud.notify(crud.msg.del, CRUD.NOTIFICATION_TYPE.SUCCESS);\n    },\n    // 搜索\n    toQuery: function toQuery() {\n      crud.page.page = 1;\n      crud.refresh();\n    },\n    // 刷新\n    refresh: function refresh() {\n      if (!callVmHook(crud, CRUD.HOOK.beforeRefresh)) {\n        return;\n      }\n\n      return new Promise(function (resolve, reject) {\n        crud.loading = true; // 请求数据\n\n        (0, _data.initData)(crud.url, crud.getQueryParams()).then(function (data) {\n          crud.page.total = data.totalElements;\n          crud.data = data.content;\n          crud.resetDataStatus(); // time 毫秒后显示表格\n\n          setTimeout(function () {\n            crud.loading = false;\n            callVmHook(crud, CRUD.HOOK.afterRefresh);\n          }, crud.time);\n          resolve(data);\n        }).catch(function (err) {\n          crud.loading = false;\n          reject(err);\n        });\n      });\n    },\n\n    /**\n     * 启动添加\n     */\n    toAdd: function toAdd() {\n      if (!(callVmHook(crud, CRUD.HOOK.beforeToAdd, crud.form) && callVmHook(crud, CRUD.HOOK.beforeToCU, crud.form))) {\n        return;\n      }\n\n      crud.status.add = CRUD.STATUS.PREPARED;\n      callVmHook(crud, CRUD.HOOK.afterToAdd, crud.form);\n      callVmHook(crud, CRUD.HOOK.afterToCU, crud.form);\n    },\n\n    /**\n     * 启动编辑\n     * @param {*} data 数据项\n     */\n    toEdit: function toEdit(data) {\n      crud.resetForm(JSON.parse(JSON.stringify(data)));\n\n      if (!(callVmHook(crud, CRUD.HOOK.beforeToEdit, crud.form) && callVmHook(crud, CRUD.HOOK.beforeToCU, crud.form))) {\n        return;\n      }\n\n      crud.status.edit = CRUD.STATUS.PREPARED;\n      crud.getDataStatus(data.id).edit = CRUD.STATUS.PREPARED;\n      callVmHook(crud, CRUD.HOOK.afterToEdit, crud.form);\n      callVmHook(crud, CRUD.HOOK.afterToCU, crud.form);\n    },\n\n    /**\n     * 启动删除\n     * @param {*} data 数据项\n     */\n    toDelete: function toDelete(data) {\n      crud.getDataStatus(data.id).delete = CRUD.STATUS.PREPARED;\n    },\n\n    /**\n     * 取消删除\n     * @param {*} data 数据项\n     */\n    cancelDelete: function cancelDelete(data) {\n      if (!callVmHook(crud, CRUD.HOOK.beforeDeleteCancel, data)) {\n        return;\n      }\n\n      crud.getDataStatus(data.id).delete = CRUD.STATUS.NORMAL;\n      callVmHook(crud, CRUD.HOOK.afterDeleteCancel, data);\n    },\n\n    /**\n     * 取消新增/编辑\n     */\n    cancelCU: function cancelCU() {\n      var addStatus = crud.status.add;\n      var editStatus = crud.status.edit;\n\n      if (addStatus === CRUD.STATUS.PREPARED) {\n        if (!callVmHook(crud, CRUD.HOOK.beforeAddCancel, crud.form)) {\n          return;\n        }\n\n        crud.status.add = CRUD.STATUS.NORMAL;\n      }\n\n      if (editStatus === CRUD.STATUS.PREPARED) {\n        if (!callVmHook(crud, CRUD.HOOK.beforeEditCancel, crud.form)) {\n          return;\n        }\n\n        crud.status.edit = CRUD.STATUS.NORMAL;\n        crud.getDataStatus(crud.form.id).edit = CRUD.STATUS.NORMAL;\n      }\n\n      crud.resetForm();\n\n      if (addStatus === CRUD.STATUS.PREPARED) {\n        callVmHook(crud, CRUD.HOOK.afterAddCancel, crud.form);\n      }\n\n      if (editStatus === CRUD.STATUS.PREPARED) {\n        callVmHook(crud, CRUD.HOOK.afterEditCancel, crud.form);\n      } // 清除表单验证\n\n\n      if (crud.findVM('form').$refs['form']) {\n        crud.findVM('form').$refs['form'].clearValidate();\n      }\n    },\n\n    /**\n     * 提交新增/编辑\n     */\n    submitCU: function submitCU() {\n      if (!callVmHook(crud, CRUD.HOOK.beforeValidateCU)) {\n        return;\n      }\n\n      crud.findVM('form').$refs['form'].validate(function (valid) {\n        if (!valid) {\n          return;\n        }\n\n        if (!callVmHook(crud, CRUD.HOOK.afterValidateCU)) {\n          return;\n        }\n\n        if (crud.status.add === CRUD.STATUS.PREPARED) {\n          crud.doAdd();\n        } else if (crud.status.edit === CRUD.STATUS.PREPARED) {\n          crud.doEdit();\n        }\n      });\n    },\n\n    /**\n     * 执行添加\n     */\n    doAdd: function doAdd() {\n      if (!callVmHook(crud, CRUD.HOOK.beforeSubmit)) {\n        return;\n      }\n\n      crud.crudMethod.add(crud.form).then(function () {\n        crud.status.add = CRUD.STATUS.NORMAL;\n        crud.resetForm();\n        crud.addSuccessNotify();\n        callVmHook(crud, CRUD.HOOK.afterSubmit);\n        crud.toQuery();\n      }).catch(function () {\n        callVmHook(crud, CRUD.HOOK.afterAddError);\n      });\n    },\n\n    /**\n     * 执行编辑\n     */\n    doEdit: function doEdit() {\n      if (!callVmHook(crud, CRUD.HOOK.beforeSubmit)) {\n        return;\n      }\n\n      crud.crudMethod.edit(crud.form).then(function () {\n        crud.status.edit = CRUD.STATUS.NORMAL;\n        crud.getDataStatus(crud.form.id).edit = CRUD.STATUS.NORMAL;\n        crud.editSuccessNotify();\n        crud.resetForm();\n        callVmHook(crud, CRUD.HOOK.afterSubmit);\n        crud.refresh();\n      }).catch(function () {\n        callVmHook(crud, CRUD.HOOK.afterEditError);\n      });\n    },\n\n    /**\n     * 执行删除\n     * @param {*} data 数据项\n     */\n    doDelete: function doDelete(data) {\n      var delAll = false;\n      var dataStatus;\n      var ids = [];\n\n      if (data instanceof Array) {\n        delAll = true;\n        data.forEach(function (val) {\n          ids.push(val.id);\n        });\n      } else {\n        ids.push(data.id);\n        dataStatus = crud.getDataStatus(data.id);\n      }\n\n      if (!callVmHook(crud, CRUD.HOOK.beforeDelete, data)) {\n        return;\n      }\n\n      if (!delAll) {\n        dataStatus.delete = CRUD.STATUS.PROCESSING;\n      }\n\n      return crud.crudMethod.del(ids).then(function () {\n        if (delAll) {\n          crud.delAllLoading = false;\n        } else dataStatus.delete = CRUD.STATUS.PREPARED;\n\n        crud.dleChangePage(1);\n        crud.delSuccessNotify();\n        callVmHook(crud, CRUD.HOOK.afterDelete, data);\n        crud.refresh();\n      }).catch(function () {\n        if (delAll) {\n          crud.delAllLoading = false;\n        } else dataStatus.delete = CRUD.STATUS.PREPARED;\n      });\n    },\n\n    /**\n     * 通用导出\n     */\n    doExport: function doExport() {\n      crud.downloadLoading = true;\n      (0, _data.download)(crud.url + '/download', crud.getQueryParams()).then(function (result) {\n        (0, _index.downloadFile)(result, crud.title + '数据', 'xlsx');\n        crud.downloadLoading = false;\n      }).catch(function () {\n        crud.downloadLoading = false;\n      });\n    },\n\n    /**\n     * 获取查询参数\n     */\n    getQueryParams: function getQueryParams() {\n      return _objectSpread(_objectSpread({\n        page: crud.page.page - 1,\n        size: crud.page.size,\n        sort: crud.sort\n      }, crud.query), crud.params);\n    },\n    // 当前页改变\n    pageChangeHandler: function pageChangeHandler(e) {\n      crud.page.page = e;\n      crud.refresh();\n    },\n    // 每页条数改变\n    sizeChangeHandler: function sizeChangeHandler(e) {\n      crud.page.size = e;\n      crud.page.page = 1;\n      crud.refresh();\n    },\n    // 预防删除第二页最后一条数据时，或者多选删除第二页的数据时，页码错误导致请求无数据\n    dleChangePage: function dleChangePage(size) {\n      if (crud.data.length === size && crud.page.page !== 1) {\n        crud.page.page -= 1;\n      }\n    },\n    // 选择改变\n    selectionChangeHandler: function selectionChangeHandler(val) {\n      crud.selections = val;\n    },\n\n    /**\n     * 重置查询参数\n     * @param {Boolean} toQuery 重置后进行查询操作\n     */\n    resetQuery: function resetQuery() {\n      var toQuery = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var defaultQuery = JSON.parse(JSON.stringify(crud.defaultQuery));\n      var query = crud.query;\n      Object.keys(query).forEach(function (key) {\n        query[key] = defaultQuery[key];\n      });\n\n      if (toQuery) {\n        crud.toQuery();\n      }\n    },\n\n    /**\n     * 重置表单\n     * @param {Array} data 数据\n     */\n    resetForm: function resetForm(data) {\n      var form = data || ((0, _typeof2.default)(crud.defaultForm) === 'object' ? JSON.parse(JSON.stringify(crud.defaultForm)) : crud.defaultForm());\n      var crudFrom = crud.form;\n\n      for (var key in form) {\n        if (crudFrom.hasOwnProperty(key)) {\n          crudFrom[key] = form[key];\n        } else {\n          _vue.default.set(crudFrom, key, form[key]);\n        }\n      }\n    },\n\n    /**\n     * 重置数据状态\n     */\n    resetDataStatus: function resetDataStatus() {\n      var dataStatus = {};\n\n      function resetStatus(datas) {\n        datas.forEach(function (e) {\n          dataStatus[e.id] = {\n            delete: 0,\n            edit: 0\n          };\n\n          if (e.children) {\n            resetStatus(e.children);\n          }\n        });\n      }\n\n      resetStatus(crud.data);\n      crud.dataStatus = dataStatus;\n    },\n\n    /**\n     * 获取数据状态\n     * @param {Number | String} id 数据项id\n     */\n    getDataStatus: function getDataStatus(id) {\n      return crud.dataStatus[id];\n    },\n\n    /**\n     * 用于树形表格多选, 选中所有\n     * @param selection\n     */\n    selectAllChange: function selectAllChange(selection) {\n      // 如果选中的数目与请求到的数目相同就选中子节点，否则就清空选中\n      if (selection && selection.length === crud.data.length) {\n        selection.forEach(function (val) {\n          crud.selectChange(selection, val);\n        });\n      } else {\n        crud.findVM('presenter').$refs['table'].clearSelection();\n      }\n    },\n\n    /**\n     * 用于树形表格多选，单选的封装\n     * @param selection\n     * @param row\n     */\n    selectChange: function selectChange(selection, row) {\n      // 如果selection中存在row代表是选中，否则是取消选中\n      if (selection.find(function (val) {\n        return val.id === row.id;\n      })) {\n        if (row.children) {\n          row.children.forEach(function (val) {\n            crud.findVM('presenter').$refs['table'].toggleRowSelection(val, true);\n            selection.push(val);\n\n            if (val.children) {\n              crud.selectChange(selection, val);\n            }\n          });\n        }\n      } else {\n        crud.toggleRowSelection(selection, row);\n      }\n    },\n\n    /**\n     * 切换选中状态\n     * @param selection\n     * @param data\n     */\n    toggleRowSelection: function toggleRowSelection(selection, data) {\n      if (data.children) {\n        data.children.forEach(function (val) {\n          crud.findVM('presenter').$refs['table'].toggleRowSelection(val, false);\n\n          if (val.children) {\n            crud.toggleRowSelection(selection, val);\n          }\n        });\n      }\n    },\n    findVM: function findVM(type) {\n      return crud.vms.find(function (vm) {\n        return vm && vm.type === type;\n      }).vm;\n    },\n    notify: function notify(title) {\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CRUD.NOTIFICATION_TYPE.INFO;\n      crud.vms[0].vm.$notify({\n        title: title,\n        type: type,\n        duration: 2500\n      });\n    },\n    updateProp: function updateProp(name, value) {\n      _vue.default.set(crud.props, name, value);\n    }\n  };\n  var crud = Object.assign({}, data); // 可观测化\n\n  _vue.default.observable(crud); // 附加方法\n\n\n  Object.assign(crud, methods); // 记录初始默认的查询参数，后续重置查询时使用\n\n  Object.assign(crud, {\n    defaultQuery: JSON.parse(JSON.stringify(data.query)),\n    // 预留4位存储：组件 主页、头部、分页、表单，调试查看也方便找\n    vms: Array(4),\n\n    /**\n     * 注册组件实例\n     * @param {String} type 类型\n     * @param {*} vm 组件实例\n     * @param {Number} index 该参数内部使用\n     */\n    registerVM: function registerVM(type, vm) {\n      var index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n      var vmObj = {\n        type: type,\n        vm: vm\n      };\n\n      if (index < 0) {\n        this.vms.push(vmObj);\n        return;\n      }\n\n      this.vms.length = Math.max(this.vms.length, index);\n      this.vms.splice(index, 1, vmObj);\n    },\n\n    /**\n     * 取消注册组件实例\n     * @param {*} vm 组件实例\n     */\n    unregisterVM: function unregisterVM(vm) {\n      this.vms.splice(this.vms.findIndex(function (e) {\n        return e && e.vm === vm;\n      }), 1);\n    }\n  }); // 冻结处理，需要扩展数据的话，使用crud.updateProp(name, value)，以crud.props.name形式访问，这个是响应式的，可以做数据绑定\n\n  Object.freeze(crud);\n  return crud;\n} // hook VM\n\n\nfunction callVmHook(crud, hook) {\n  if (crud.debug) {\n    console.log('callVmHook: ' + hook);\n  }\n\n  var ret = true;\n  var nargs = [crud];\n\n  for (var i = 2; i < arguments.length; ++i) {\n    nargs.push(arguments[i]);\n  } // 有些组件扮演了多个角色，调用钩子时，需要去重\n\n\n  var vmSet = new Set();\n  crud.vms.forEach(function (vm) {\n    return vm && vmSet.add(vm.vm);\n  });\n  vmSet.forEach(function (vm) {\n    if (vm[hook]) {\n      ret = vm[hook].apply(vm, nargs) !== false && ret;\n    }\n  });\n  return ret;\n}\n\nfunction mergeOptions(src, opts) {\n  var optsRet = _objectSpread({}, src);\n\n  for (var key in src) {\n    if (opts.hasOwnProperty(key)) {\n      optsRet[key] = opts[key];\n    }\n  }\n\n  return optsRet;\n}\n/**\n * crud主页\n */\n\n\nfunction presenter(crud) {\n  function obColumns(columns) {\n    return {\n      visible: function visible(col) {\n        return !columns || !columns[col] ? true : columns[col].visible;\n      }\n    };\n  }\n\n  return {\n    inject: ['crud'],\n    beforeCreate: function beforeCreate() {\n      // 由于initInjections在initProvide之前执行，如果该组件自己就需要crud，需要在initInjections前准备好crud\n      this._provided = {\n        crud: crud,\n        'crud.query': crud.query,\n        'crud.page': crud.page,\n        'crud.form': crud.form\n      };\n    },\n    data: function data() {\n      return {\n        searchToggle: true,\n        columns: obColumns()\n      };\n    },\n    methods: {\n      parseTime: _index.parseTime\n    },\n    created: function created() {\n      this.crud.registerVM('presenter', this, 0);\n\n      if (crud.queryOnPresenterCreated) {\n        crud.toQuery();\n      }\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.crud.unregisterVM(this);\n    },\n    mounted: function mounted() {\n      var columns = {};\n      this.$refs.table.columns.forEach(function (e) {\n        if (!e.property || e.type !== 'default') {\n          return;\n        }\n\n        columns[e.property] = {\n          label: e.label,\n          visible: true\n        };\n      });\n      this.columns = obColumns(columns);\n      this.crud.updateProp('tableColumns', columns);\n    }\n  };\n}\n/**\n * 头部\n */\n\n\nfunction header() {\n  return {\n    inject: {\n      crud: {\n        from: 'crud'\n      },\n      query: {\n        from: 'crud.query'\n      }\n    },\n    created: function created() {\n      this.crud.registerVM('header', this, 1);\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.crud.unregisterVM(this);\n    }\n  };\n}\n/**\n * 分页\n */\n\n\nfunction pagination() {\n  return {\n    inject: {\n      crud: {\n        from: 'crud'\n      },\n      page: {\n        from: 'crud.page'\n      }\n    },\n    created: function created() {\n      this.crud.registerVM('pagination', this, 2);\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.crud.unregisterVM(this);\n    }\n  };\n}\n/**\n * 表单\n */\n\n\nfunction form(defaultForm) {\n  return {\n    inject: {\n      crud: {\n        from: 'crud'\n      },\n      form: {\n        from: 'crud.form'\n      }\n    },\n    created: function created() {\n      this.crud.registerVM('form', this, 3);\n      this.crud.defaultForm = defaultForm;\n      this.crud.resetForm();\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.crud.unregisterVM(this);\n    }\n  };\n}\n/**\n * crud\n */\n\n\nfunction crud() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var defaultOptions = {\n    type: undefined\n  };\n  options = mergeOptions(defaultOptions, options);\n  return {\n    inject: {\n      crud: {\n        from: 'crud'\n      }\n    },\n    created: function created() {\n      this.crud.registerVM(options.type, this);\n    },\n    beforeDestroy: function beforeDestroy() {\n      this.crud.unregisterVM(this);\n    }\n  };\n}\n/**\n * CRUD钩子\n */\n\n\nCRUD.HOOK = {\n  /** 刷新 - 之前 */\n  beforeRefresh: 'beforeCrudRefresh',\n\n  /** 刷新 - 之后 */\n  afterRefresh: 'afterCrudRefresh',\n\n  /** 删除 - 之前 */\n  beforeDelete: 'beforeCrudDelete',\n\n  /** 删除 - 之后 */\n  afterDelete: 'afterCrudDelete',\n\n  /** 删除取消 - 之前 */\n  beforeDeleteCancel: 'beforeCrudDeleteCancel',\n\n  /** 删除取消 - 之后 */\n  afterDeleteCancel: 'afterCrudDeleteCancel',\n\n  /** 新建 - 之前 */\n  beforeToAdd: 'beforeCrudToAdd',\n\n  /** 新建 - 之后 */\n  afterToAdd: 'afterCrudToAdd',\n\n  /** 编辑 - 之前 */\n  beforeToEdit: 'beforeCrudToEdit',\n\n  /** 编辑 - 之后 */\n  afterToEdit: 'afterCrudToEdit',\n\n  /** 开始 \"新建/编辑\" - 之前 */\n  beforeToCU: 'beforeCrudToCU',\n\n  /** 开始 \"新建/编辑\" - 之后 */\n  afterToCU: 'afterCrudToCU',\n\n  /** \"新建/编辑\" 验证 - 之前 */\n  beforeValidateCU: 'beforeCrudValidateCU',\n\n  /** \"新建/编辑\" 验证 - 之后 */\n  afterValidateCU: 'afterCrudValidateCU',\n\n  /** 添加取消 - 之前 */\n  beforeAddCancel: 'beforeCrudAddCancel',\n\n  /** 添加取消 - 之后 */\n  afterAddCancel: 'afterCrudAddCancel',\n\n  /** 编辑取消 - 之前 */\n  beforeEditCancel: 'beforeCrudEditCancel',\n\n  /** 编辑取消 - 之后 */\n  afterEditCancel: 'afterCrudEditCancel',\n\n  /** 提交 - 之前 */\n  beforeSubmit: 'beforeCrudSubmitCU',\n\n  /** 提交 - 之后 */\n  afterSubmit: 'afterCrudSubmitCU',\n  afterAddError: 'afterCrudAddError',\n  afterEditError: 'afterCrudEditError'\n};\n/**\n * CRUD状态\n */\n\nCRUD.STATUS = {\n  NORMAL: 0,\n  PREPARED: 1,\n  PROCESSING: 2\n};\n/**\n * CRUD通知类型\n */\n\nCRUD.NOTIFICATION_TYPE = {\n  SUCCESS: 'success',\n  WARNING: 'warning',\n  INFO: 'info',\n  ERROR: 'error'\n};\nvar _default = CRUD;\nexports.default = _default;",null]}